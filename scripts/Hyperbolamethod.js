(()=>{var ue=Object.defineProperty;var D=Object.getOwnPropertySymbols;var de=Object.prototype.hasOwnProperty,me=Object.prototype.propertyIsEnumerable;var K=(i,e,t)=>e in i?ue(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t,k=(i,e)=>{for(var t in e||(e={}))de.call(e,t)&&K(i,t,e[t]);if(D)for(var t of D(e))me.call(e,t)&&K(i,t,e[t]);return i};var z=(i,e,t)=>new Promise((n,r)=>{var a=m=>{try{h(t.next(m))}catch(p){r(p)}},o=m=>{try{h(t.throw(m))}catch(p){r(p)}},h=m=>m.done?n(m.value):Promise.resolve(m.value).then(a,o);h((t=t.apply(i,e)).next())});function E(i,e=[],t={},n={}){let r=document.createElement(i);for(let[o,h]of Object.entries(t))r.setAttribute(o,typeof h=="string"?h:h+"");for(let[o,h]of Object.entries(n))r[o]=h;if(Array.isArray(e))for(var a of e)typeof a=="string"&&(a=document.createTextNode(a)),r.append(a);else r.innerHTML=e.__html;return r}function X(i,e){for(var t of e)Array.isArray(t)?X(i,t):i.append(t instanceof Node?t:""+t)}function f(i,e,...t){if(i===f.Fragment){let o=document.createDocumentFragment();return X(o,t),o}let n=document.createElement(i);e=e||{},"__html"in e&&(n.innerHTML=""+e.__html,delete e.__html);for(var[r,a]of Object.entries(e))typeof a=="function"?n[r]=a:n.setAttribute(r,""+a);return X(n,t),n}f.Fragment="";var he=`:host{position:relative;top:0;left:0;display:block;width:100%;height:100%;overflow:hidden;padding:0;margin:0}._container_1kdby_13{display:block;position:absolute;width:100%;height:100%;touch-action:none;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}._container_1kdby_13>div,._container_1kdby_13>canvas{position:absolute;top:0;left:0;width:100%;height:100%}
`,be={container:"_container_1kdby_13"},B={css:he,class:be};function G(i){return{update(e,t){let n=t.getContext("2d"),r=window.devicePixelRatio;(Math.floor(e.width*r)!==t.width||Math.floor(e.height*r)!==t.height)&&(t.width=Math.floor(e.width*r),t.height=Math.floor(e.height*r)),n.setTransform(r,0,0,r,0,0),i.update(e,n)},resized(e){e.update(this)},connected(e){return{nodes:E("canvas",[],{class:"canvas-layer"})}}}}var ce=`._button_1aydv_1{position:absolute;bottom:1em;right:1em;width:50px;height:50px;padding:10px;border-radius:50%;border:2px solid #012;background-color:#012;color:#def;z-index:99}._button_1aydv_1:hover{background-color:#bbddee;color:#001122}._button_1aydv_1:active{transform:translateY(1px);background-color:#bbddee;color:#001122}._icon_1aydv_25{display:block;width:100%;height:100%}.active ._icon_1aydv_25{display:none}._icon_x_1aydv_35{display:none;width:100%;height:100%}.active ._icon_x_1aydv_35{display:block}._container_1aydv_45{display:none;position:absolute;overflow:scroll;top:0;right:0;width:100%;height:100%;background-color:#eeeeeeaa;margin:0;padding:20px;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;z-index:99}._list_1aydv_63{display:grid;display:block;grid-template-columns:repeat(auto-fill,250px);margin:auto}dialog::backdrop{background:rgba(0,0,0,0.9)}
`,pe={button:"_button_1aydv_1",icon:"_icon_1aydv_25",icon_x:"_icon_x_1aydv_35",container:"_container_1aydv_45",list:"_list_1aydv_63"},w={css:ce,class:pe};var fe={section:function(i,e){var t;return{input:f((t=e==null?void 0:e.level)!=null?t:"h2",{},i)}},number:function(i){let e=i.onChange;return{label:f("label",null,i.label),input:f("input",k({type:"number",oninput:t=>{e==null||e(parseInt(t.target.value))}},i.default?{value:i.default}:{}))}},color:function(i){let e=i.onChange;return{label:f("label",null,i.label),input:f("input",k({type:"color",oninput:t=>{e==null||e(t.target.value)}},i.default?{value:i.default}:{}))}},radio:function(i){let e=i.onChange;return{label:f("label",null,i.label),input:f(f.Fragment,null,i.values.map(t=>f(f.Fragment,null,f("label",null,t.label,f("input",k({type:"radio",name:i.label,value:t.name,oninput:n=>{e==null||e(n.target.value)}},t.name===i.default?{checked:""}:{}))),f("span",{style:"display:inline-block;width:1em;"}))))}},multiButton:function(i){let e=i.onClick;return{label:f("label",null,i.label),input:f(f.Fragment,null,i.values.map(t=>f("button",{value:t.name,onclick:n=>{e==null||e(n.target.value)}},t.label)))}},custom:function(i){return{label:typeof i.label=="string"?f("span",null,i.label):i.label,input:i.input}}};function A(){return i=>{let e=f("div",{class:w.class.container},f("h1",null,"Options")),t=f("button",{"arial-label":"Options Toggle",class:w.class.button,title:"Show all options",__html:`<svg xmlns="http://www.w3.org/2000/svg" class="${w.class.icon}" viewBox="0 0 24 24" style="fill:currentColor;"><path d="M19.9,13.3C20,12.8,20,12.4,20,12s0-0.8-0.1-1.3L21.8,9l-2.3-4l-2.4,0.8c-0.7-0.5-1.4-1-2.2-1.3L14.3,2H9.7L9.2,4.5	C8.3,4.8,7.6,5.3,6.9,5.8L4.5,5L2.2,9l1.9,1.7C4,11.2,4,11.6,4,12c0,0.4,0,0.8,0.1,1.3L2.2,15l2.3,4l2.4-0.8l0,0	c0.7,0.5,1.4,1,2.2,1.3L9.7,22h4.7l0.5-2.5c0.8-0.3,1.6-0.7,2.2-1.3l0,0l2.4,0.8l2.3-4L19.9,13.3L19.9,13.3z M12,16	c-2.2,0-4-1.8-4-4c0-2.2,1.8-4,4-4c2.2,0,4,1.8,4,4C16,14.2,14.2,16,12,16z"></path></svg><svg class="${w.class.icon_x}" version="1.1" viewBox="0 0 460.78 460.78" xml:space="preserve" xmlns="http://www.w3.org/2000/svg"><path fill="currentColor" d="m285.08 230.4 171.14-171.13c6.076-6.077 6.076-15.911 0-21.986l-32.707-32.719c-2.913-2.911-6.866-4.55-10.992-4.55-4.127 0-8.08 1.639-10.993 4.55l-171.14 171.14-171.14-171.14c-2.913-2.911-6.866-4.55-10.993-4.55-4.126 0-8.08 1.639-10.992 4.55l-32.707 32.719c-6.077 6.075-6.077 15.909 0 21.986l171.14 171.13-171.12 171.11c-6.074 6.077-6.074 15.911 0 21.986l32.709 32.719c2.911 2.911 6.865 4.55 10.992 4.55s8.08-1.639 10.994-4.55l171.12-171.12 171.12 171.12c2.913 2.911 6.866 4.55 10.993 4.55 4.128 0 8.081-1.639 10.992-4.55l32.709-32.719c6.074-6.075 6.074-15.909 0-21.986l-171.12-171.11z"/></svg>`,onclick:()=>{let r=e.style.display=="block";e.style.display=r?"":"block",r?t.classList.remove("active"):t.classList.add("active")}}),n=new J;return n.container.className=w.class.list,e.append(n.container),i.attachToShaddow(f("style",{__html:w.css}),e,t),{nodes:void 0,handle:n}}}function V(i){let e=f("input",{type:"number",style:"width:6em;"}),t=f("input",{type:"number",style:"width:6em;"}),n=f("span",null,"auto sizing"),r=new ResizeObserver(()=>{if(i.containerElement.style.width==="")return;let b=i.hostElement;if(!b)return;let{clientWidth:s,clientHeight:d}=i.containerElement,{clientWidth:l,clientHeight:u}=b,c=Math.min(l/s,u/d);i.containerElement.style.transformOrigin="top left",i.containerElement.style.transform=`translate(${(l-s*c)/2}px, ${(u-d*c)/2}px) scale(${c}, ${c})`}),a=!1,o=(b,s)=>{let d=b<0||s<0||isNaN(b)||isNaN(s);d&&a&&(r.unobserve(i.containerElement),r.unobserve(i.hostElement),a=!1),!a&&!d&&(r.observe(i.containerElement),r.observe(i.hostElement),a=!0),d?(i.containerElement.style.width="",i.containerElement.style.height="",i.containerElement.style.outline="",i.containerElement.style.transform="",i.containerElement.style.transformOrigin="",n.textContent="auto sizing"):(i.containerElement.style.width=b+"px",i.containerElement.style.height=s+"px",i.containerElement.style.outline="1px dashed black",n.textContent=b+" x "+s),h.close()},h=f("dialog",null,f("form",{onsubmit:()=>(o(parseInt(e.value),parseInt(t.value)),!1)},f("p",null,"Choose new size:"),e," x ",t,f("br",null),f("input",{type:"submit",value:"Apply"}),f("input",{type:"button",value:"Reset",onclick:()=>{o(-1,-1)}}))),m,p;return m=f("span",null,f("input",{type:"button",value:"Change",onclick:()=>{h.showModal()}}),h),{label:f("span",null,"Canvas size (",n,")"),input:m}}var J=class{constructor(){this.container=f("div",null)}add(e,...t){Array.isArray(e)&&(t=e.slice(1),e=e[0]);var r=(typeof e=="function"?e:fe[e])(...t);if(console.log(r),this.addOption(r),"handle"in r)return r.handle}addOption(e){this.container.appendChild(f("div",{style:"margin-top: 10px;"},e.label?f("div",null,f("b",null,e.label,":")):[],f("div",null,e.input)))}};var q=class extends HTMLElement{constructor(){super(...arguments);this.shadow=this.attachShadow({mode:"open"});this.cleanup=[]}connectedCallback(){var p,b;let e=this.shadow;e.innerHTML="";let t=E("style",[B.css]),n=E("div",[],{class:B.class.container}),r=new ResizeObserver(()=>{var d,l,u,c;(l=(d=this.layerHandler).resized)==null||l.call(d,m);for(var s of a.values())(c=(u=s.layer)==null?void 0:u.resized)==null||c.call(u,m,s.nodes)});r.observe(n),e.append(t,n);let a=new Map,o=0,h=()=>{var l,u;let s=o===2;o=0;for(var d of a.values())(s||d.update)&&((u=(l=d.layer)==null?void 0:l.update)==null||u.call(l,m,d.nodes)),d.update=!1},m={get width(){return n.clientWidth},get height(){return n.clientHeight},containerElement:n,hostElement:this,update:function(s){if(o!==2){if(o===0&&requestAnimationFrame(h),s===void 0){o=2;return}if(typeof s=="string"){o=1;let l=a.get(s);l&&(l.update=!0);return}for(var d of a.values())s===d.layer&&(d.update=!0)}},addStyles:function(s){t.append(s)},addLayer:function(s,d){if(d instanceof Node){n.appendChild(d);return}let l,u;typeof d=="function"?(u=d(m),l=void 0):(u=d.connected(m),l=d);let c=u.nodes;c&&(Array.isArray(c)?n.append(...c):n.append(c)),a.set(s,{nodes:c,layer:l,update:!1}),m.update(s);let y=u.handle;return y||(y={}),y.update=()=>{this.update(s)},y},attachToShaddow(...s){e.append(...s)}};(b=(p=this.layerHandler).connected)==null||b.call(p,m),this.cleanup.push(()=>{var d,l,u,c;r.unobserve(n);for(var s of a.values())(l=(d=s.layer)==null?void 0:d.disconnected)==null||l.call(d,m);(c=(u=this.layerHandler).disconnected)==null||c.call(u,m)})}disconnectedCallback(){for(var e of this.cleanup)e();this.cleanup=[],this.shadow.innerHTML=""}};function Z(i){return class extends q{constructor(){super(...arguments);this.layerHandler=i}}}var U=2*Math.PI,Q=.5/Math.PI,P=class{constructor(e,t,n){this._lineWidth=1;this._fontSize=13;this._fillColor="#000000";this._strokeColor="#000000";this.fontAscent=-1;this.fontDescent=-1;this._ctx=e,this.width=t===void 0?e.canvas.width:t,this.height=n===void 0?e.canvas.height:n,this.fontSize=13}get lineWidth(){return this._lineWidth}set lineWidth(e){this._ctx.lineWidth=e,this._lineWidth=e}get fontSize(){return this._fontSize}set fontSize(e){this._ctx.textBaseline="alphabetic",this._ctx.font=e+"px Times New Roman",this._fontSize=e;let t=this._ctx.measureText("1ATOgjp");this.fontAscent=t.fontBoundingBoxAscent||t.actualBoundingBoxAscent,this.fontDescent=t.fontBoundingBoxDescent||t.actualBoundingBoxDescent}get fillStyle(){return this._fillColor}set fillStyle(e){this._ctx.fillStyle=e,this._fillColor=e}get strokeStyle(){return this._strokeColor}set strokeStyle(e){this._ctx.strokeStyle=e,this._strokeColor=e}measureText(e){this._ctx.textAlign="center";let t=this._ctx.measureText(e),n=(this.fontAscent+this.fontDescent)/2;return{top:n*1.3,bot:n*1,left:t.actualBoundingBoxLeft,right:t.actualBoundingBoxRight}}textNode(e,t,n,r){let a="middle",o="center";switch(r&12){case v.T:a="top";break;case v.B:a="bottom";break}switch(r&3){case v.L:o="left";break;case v.R:o="right";break}return this._ctx.textBaseline=a,this._ctx.textAlign=o,this._ctx.fillText(e,t,n),this}beginPath(){return this._ctx.beginPath(),this}moveTo(e,t){return this._ctx.moveTo(e,t),this}lineTo(e,t){return this._ctx.lineTo(e,t),this}quadraticTo(e,t,n,r){return this._ctx.quadraticCurveTo(e,t,n,r),this}cubicTo(e,t,n,r,a,o){return this._ctx.bezierCurveTo(e,t,n,r,a,o),this}closePath(){return this._ctx.closePath(),this}rect(e,t,n,r){return this._ctx.rect(e,t,n,r),this}arc(e,t,n,r,a,o){return this._ctx.arc(e,t,n,r-U*Math.floor(Q*r),a-U*Math.floor(Q*a),!o),this}stroke(){return this._ctx.stroke(),this}fill(){return this._ctx.fill(),this}fillAndStroke(){return this.fill(),this.stroke(),this}};var j=class{constructor(e,t,...n){this.name=e;this.children=n,this.attributes=t||{}}attrString(){return Object.entries(this.attributes).map(([e,t])=>`${e}="${t}"`).join(" ")}chString(){return this.children.map(e=>e.toString()).join("")}append(e){this.children.push(e)}toString(){let e=this.name;return e===""?this.chString():`<${e} ${this.attrString()}>${this.chString()}</${e}>`}};function S(i,e,...t){return typeof i=="function"?i(e,...t):new j(i,e,...t)}S.Fragment="";var Ae=180/Math.PI,De=2*Math.PI,ye=.5/Math.PI,N=class{constructor(e,t){this.style={stroke:{stroke:"#000000","stroke-width":1},fill:{fill:"#000000"},fontSize:13};this.svg=S("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",viewBox:`0 0 ${e} ${t}`})}round(e){return Math.round(e*1e3)/1e3}get fillStyle(){return this.style.fill.fill}set fillStyle(e){let{fill:t}=this.style;if(e.length==9){let n=parseInt("0x"+e.slice(7,9))/255;e=e.slice(0,7),n===1?delete t["fill-opacity"]:t["fill-opacity"]=Math.round(1e3*n)/1e3}else delete t["fill-opacity"];t.fill=e}get strokeStyle(){return this.style.stroke.stroke}set strokeStyle(e){let{stroke:t}=this.style;if(e.length==9){let n=parseInt("0x"+e.slice(7,9))/255;e=e.slice(0,7),n===1?delete t["stroke-opacity"]:t["stroke-opacity"]=Math.round(1e3*n)/1e3}else delete t["stroke-opacity"];t.stroke=e}get lineWidth(){return this.style.stroke["stroke-width"]}set lineWidth(e){this.style.stroke["stroke-width"]=e}get fontSize(){return this.style.fontSize}set fontSize(e){this.style.fontSize=e}textNode(e,t,n,r=0){let a="middle",o="middle";switch(r&12){case v.T:a="hanging";break;case v.B:a="text-after-edge";break}switch(r&3){case v.L:o="start";break;case v.R:o="end";break}let h=this.round;return this.svg.append(S("text",{x:h(t),y:h(n),"font-size":this.style.fontSize,"font-family":"Times New Roman","dominant-baseline":a,"text-anchor":o},e)),this}beginPath(){return this._path=void 0,this}moveTo(e,t){let n=this.round;return this._path=(this._path||"")+`M${n(e)} ${n(t)}`,this}lineTo(e,t){if(!this._path)return this.moveTo(e,t);let n=this.round;return this._path+=`L${n(e)} ${n(t)}`,this}quadraticTo(e,t,n,r){if(!this._path)return this.moveTo(n,r);let a=this.round;return this._path+=`Q${a(e)} ${a(t)} ${a(n)} ${a(r)}`,this}cubicTo(e,t,n,r,a,o){if(!this._path)return this.moveTo(a,o);let h=this.round;return this._path+=`C${h(e)} ${h(t)} ${h(n)} ${h(r)} ${h(a)} ${h(o)}`,this}closePath(){return this._path=(this._path||"")+"Z",this}rect(e,t,n,r){return this.moveTo(e,t),this.lineTo(e+n,t),this.lineTo(e+n,t+r),this.lineTo(e,t+r),this.lineTo(e,t),this}arc(e,t,n,r,a,o){let h=(a-r)*ye;if(h=h-Math.floor(h),h>=.499&&h<=.511){let u=r+(o?.5*h:-.5*h);return this.arc(e,t,n,r,u,o),this.arc(e,t,n,u,a,o),this}let m=e+n*Math.cos(r),p=t+n*Math.sin(r),b=e+n*Math.cos(a),s=t+n*Math.sin(a),d=h<=.5==o,l=this.round;return this.lineTo(m,p),this._path+=`A ${l(n)} ${l(n)} 0 ${d?0:1} ${o?1:0} ${l(b)} ${l(s)}`,this}stroke(){return this._path&&this.svg.append(S("path",k({d:this._path,fill:"none"},this.style.stroke))),this}fill(){return this._path&&this.svg.append(S("path",k({d:this._path},this.style.fill))),this}fillAndStroke(){return this._path&&this.svg.append(S("path",k(k({d:this._path},this.style.fill),this.style.stroke))),this}toXML(){return`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
${this.svg.toString()}`}toFileString(){return this.toXML()}};var I=class{constructor(e,t){this.style={stroke:{color:"black",opacity:1,width:1},fill:{opacity:1,color:"black"},fontSize:13};this.width=e,this.height=t,this.TeX=`\\begin{tikzpicture}[x=1pt,y=-1pt,every node/.style={inner sep=0,outer sep=0}]%
\\fontfamily{ptm}\\selectfont%
\\useasboundingbox (0,0) rectangle (${e},${t});%
\\clip (0,0) rectangle (${e},${t});%
`}round(e){return Math.round(e*1e3)/1e3}_pathAttr(e,t){let{fill:n,stroke:r}=this.style,a;return e&&(a=`fill=${n.color}${n.opacity==1?"":",fill opacity="+n.opacity}`),t&&(a=(a?a+",":"")+`draw=${r.color},line width=${r.width}${r.opacity==1?"":",draw opacity="+r.opacity}`),a}get fillStyle(){throw new Error("not implemented")}set fillStyle(e){let{fill:t}=this.style,n=parseInt("0x"+e.substring(1));e.length===9?(t.opacity=(n&255)/255,n>>=8):t.opacity=1;let r=255&n,a=255&n>>8,o=255&n>>16;o==0&&a==0&&r==0?t.color="black":t.color=`{rgb,255:red,${o}; green,${a}; blue,${r}}`}get strokeStyle(){throw new Error("Not Implemented")}set strokeStyle(e){let{stroke:t}=this.style,n=parseInt("0x"+e.substring(1));e.length===9?(t.opacity=(n&255)/255,n>>=8):t.opacity=1;let r=255&n,a=255&n>>8,o=255&n>>16;o==0&&a==0&&r==0?t.color="black":t.color=`{rgb,255:red,${o}; green,${a}; blue,${r}}`}get lineWidth(){throw new Error("Not Implemented")}set lineWidth(e){this.style.stroke.width=e}get fontSize(){return this.style.fontSize}set fontSize(e){this.style.fontSize=e}textNode(e,t,n,r=0){let a;switch(r&12){case v.T:a="north";break;case v.B:a="south";break}switch(r&3){case v.L:a=(a?a+" ":"")+"west";break;case v.R:a=(a?a+" ":"")+"east";break}a=a||"center";let o=this.round;return this.TeX+=`\\node at(${o(t)},${o(n)}) [anchor=${a}]{\\fontsize{${this.style.fontSize}pt}{${this.style.fontSize}pt}\\selectfont\\vphantom{Og}${e.replace("\\","\\textbackslash{}")}};`,this}beginPath(){return this.path=void 0,this.pos=void 0,this}moveTo(e,t){let n=this.round;return this.path=(this.path||"")+` (${n(e)},${n(t)})`,this.pos=[e,t],this}lineTo(e,t){if(!this.path)return this.moveTo(e,t);let n=this.round;return this.path+=` -- (${n(e)},${n(t)})`,this.pos=[e,t],this}quadraticTo(e,t,n,r){if(!this.path)return this.moveTo(n,r);let[a,o]=this.pos;return this.cubicTo(a+2/3*(e-a),o+2/3*(t-o),n+2/3*(e-n),r+2/3*(t-r),n,r)}cubicTo(e,t,n,r,a,o){if(!this.path)return this.moveTo(a,o);let h=this.round;return this.path+=` .. controls (${h(e)},${h(t)}) and (${h(n)},${h(r)}) .. (${h(a)},${h(o)})`,this.pos=[a,o],this}closePath(){return this.path+=" -- cycle",this}rect(e,t,n,r){return this.moveTo(e,t),this.lineTo(e+n,t),this.lineTo(e+n,t+r),this.lineTo(e,t+r),this.lineTo(e,t),this}arc(e,t,n,r,a,o){let h=e+n*Math.cos(r),m=t+n*Math.sin(r),p=e+n*Math.cos(a),b=t+n*Math.sin(a);r/=2*Math.PI,a/=2*Math.PI,r-=Math.floor(r),a-=Math.floor(a),o&&a<r&&(a+=1),!o&&r<a&&(a-=1),this.lineTo(h,m);let s=this.round;return this.path+=` arc(${s(r*360)}:${s(a*360)}:${s(n)})`,this.pos=[p,b],this}stroke(){let e=`\\path [${this._pathAttr(!1,!0)}]${this.path};%
`;return this.TeX+=e,this}fill(){let e=`\\path [${this._pathAttr(!0,!1)}]${this.path};%
`;return this.TeX+=e,this}fillAndStroke(){let e=`\\path [${this._pathAttr(!0,!0)}]${this.path};%
`;return this.TeX+=e,this}toTeX(){return this.TeX+"\\end{tikzpicture}"}toFileString(){return this.toTeX()}};var v;(function(p){p[p.C=0]="C",p[p.T=8]="T",p[p.L=2]="L",p[p.R=1]="R",p[p.B=4]="B",p[p.TL=10]="TL",p[p.TR=9]="TR",p[p.BL=6]="BL",p[p.BR=5]="BR"})(v||(v={}));function ee(i,e,t,n){return z(this,null,function*(){var h,m;n!=null||(n=ge);let r=n.create();(h=r.begin)==null||h.call(r);let a=e.apply(i,t),o=a.next();for(;!o.done;)r.shouldYield()&&(yield r.yield()),o=a.next();return(m=r.done)==null||m.call(r),o.value})}function te(i,e,t){let n=e.apply(i,t),r=n.next();for(;!r.done;)r=n.next();return r.value}var ge={create:()=>({shouldYield(){return!1},yield(){return z(this,null,function*(){})}})};function ne(i){let e=i[i.length-1],t;return"create"in e&&(i=Array.prototype.slice.call(i,0,i.length-1),t=e),[t,i]}var re;(function(t){function i(n){return function(...a){let[o,h]=ne(a);return ee(this,n,h,o)}}t.async=i;function e(n){return function(...a){return te(this,n,a)}}t.sync=e})(re||(re={}));var O;(function(t){function i(n){return function(...a){let[o,h]=ne(a);return ee(this,this[n],h,o)}}t.async=i;function e(n){return function(...a){return te(this,this[n],a)}}t.sync=e})(O||(O={}));var C;(function(n){n.Infinity="infinity",n.Complex="complex",n.Moebius="moebius"})(C||(C={}));var $={mathtype:C.Infinity},F=class{constructor(e,t,n=1){this.start=e;this.end=t;this.step=n}*[Symbol.iterator](){let{start:e,step:t,end:n}=this;for(;e<n;)yield e,e+=t}};function Te(i,e){return typeof i=="number"?new x(i,e):Array.isArray(i)?new x(i[0],i[1]):i}var x=class{constructor(e,t=0){this.mathtype=C.Complex;this.real=e,this.imag=t}abs2(){return this.real*this.real+this.imag*this.imag}abs(){return Math.sqrt(this.abs2())}add(e){return typeof e=="number"?new x(this.real+e,this.imag):new x(this.real+e.real,this.imag+e.imag)}sub(e){return typeof e=="number"?new x(this.real-e,this.imag):new x(this.real-e.real,this.imag-e.imag)}mul(e){return typeof e=="number"?new x(e*this.real,e*this.imag):new x(this.real*e.real-this.imag*e.imag,this.imag*e.real+this.real*e.imag)}div(e){return typeof e=="number"?new x(this.real/e,this.imag/e):this.mul(e.inv())}inv(){var e=this.abs2();return new x(this.real/e,-this.imag/e)}arg(){var e=this.real,t=this.imag;if(e==0)return t>0?.5*Math.PI:t<0?1.5*Math.PI:0;if(e>=0){let n=Math.atan(1*t/e);return n<0?2*Math.PI+n:n}return Math.atan(1*t/e)+Math.PI}toTeX(){return this.imag==0?`${this.real}`:this.real==0?`${this.imag}i`:`${this.real} + ${this.imag}i`}},_=class{constructor(e,t,n,r){this.mathtype=C.Moebius;this.m=[e,t,n,r]}mul(e){let t=this.m,n=e.m;return new _(t[0]*n[0]+t[1]*n[2],t[0]*n[1]+t[1]*n[3],t[2]*n[0]+t[3]*n[2],t[2]*n[1]+t[3]*n[3])}inv(){let e=this.m;return new _(e[3],-e[1],-e[2],e[0])}transform(e,t){if(typeof e=="number")e=Te(e,t);else if(e.mathtype===C.Infinity)return this.m[2]==0?$:new x(this.m[0]/this.m[2]);let n=this.m,r=e.mul(n[2]).add(n[3]);return r.real==0&&r.imag==0?$:e.mul(n[0]).add(n[1]).div(r)}toTeX(){return`\\begin{pmatrix}${this.m[0]}&${this.m[1]}\\\\ ${this.m[2]}&${this.m[3]}\\end{pmatrix}`}},ie;(function(b){class i{constructor(d,l){this.cosetRepresentatives=O.sync("_cosetRepresentatives");this.cosetRepresentativesAsync=O.async("_cosetRepresentatives");this.indicator=d,this.tex=l}findCosetIndex(d,l,u){let c=u.inv(),y=this.indicator;for(var T=0;T<l.length;T++)if(y(d,l[T].mul(c)))return T;return-1}findCoset(d,l,u){let c=u.inv(),y=this.indicator;return l.find(T=>y(d,T.mul(c)))}*_cosetRepresentatives(d){if(!Number.isInteger(d)||d<=0)throw"Invalid Level";let l=[new _(0,-1,1,0),new _(1,1,0,1),new _(1,-1,0,1)],u=this,c=[new _(1,0,0,1)];for(var y=[],T=[],M=[new _(1,0,0,1)];M.length>0;){y=T,T=M,M=[];for(let se of T)for(let le of l){yield;let L=se.mul(le);u.findCosetIndex(d,y,L)==-1&&u.findCosetIndex(d,M,L)==-1&&u.findCosetIndex(d,T,L)==-1&&(c.push(L),M.push(L))}}return c}toTeX(){return this.tex}}b.CongruenceSubgroup=i;function e(s,d,l){return(s-d)%l==0}function t(s,d){return e(d.m[2],0,s)}b.Gamma_0=new i(t,"\\Gamma_0");function r(s,d){return e(d.m[2],0,s)&&(e(d.m[0],1,s)||e(d.m[0],-1,s))}b.Gamma_1=new i(r,"\\Gamma_1");function o(s,d){return e(d.m[2],0,s)&&e(d.m[1],0,s)&&(e(d.m[0],1,s)||e(d.m[0],-1,s))}b.Gamma=new i(o,"\\Gamma"),b.Gamma.cosetRepresentatives=function(s){let d=b.Gamma_1.cosetRepresentatives(s),l=[];for(let u=0;u<s;u++){let c=new _(1,u,0,1);l.push(...d.map(y=>c.mul(y)))}return l},b.Gamma._cosetRepresentatives=function*(s){let d=yield*b.Gamma_1._cosetRepresentatives(s),l=[];for(let u=0;u<s;u++){yield;let c=new _(1,u,0,1);l.push(...d.map(y=>c.mul(y)))}return l};let m=new x(Math.cos(Math.PI/3),Math.sin(Math.PI/3));b.Domain1={corners:[$,m,new x(0,1),new x(-m.real,m.imag)],findCosetOf(s,d=100){if(s.imag<=0)return;let l=new _(1,0,0,1),u=s;for(var c=0;c<d;c++){if(u==$)return l.inv();var y=Math.floor(u.real+.5);if(l=new _(1,-y,0,1).mul(l),u=l.transform(s),u.abs2()>=1)return l.inv();l=new _(0,1,-1,0).mul(l),u=l.transform(s)}console.log("Max iterations in 'findMoebiousToFund' reached")}}})(ie||(ie={}));var g;(function(u){u[u.BEGIN=0]="BEGIN",u[u.MOVE=1]="MOVE",u[u.LINE=2]="LINE",u[u.QUADRATIC=3]="QUADRATIC",u[u.CUBIC=4]="CUBIC",u[u.ARC=5]="ARC",u[u.CLOSE=6]="CLOSE",u[u.STROKE=7]="STROKE",u[u.FILL=8]="FILL",u[u.TEXTNODE=9]="TEXTNODE",u[u.CH_LINEWIDTH=10]="CH_LINEWIDTH",u[u.CH_FONTSIZE=11]="CH_FONTSIZE",u[u.CH_STROKESTYLE=12]="CH_STROKESTYLE",u[u.CH_FILLSTYLE=13]="CH_FILLSTYLE"})(g||(g={}));var H=class{constructor(){this.data=[]}get strokeStyle(){throw new Error("Method not implemented.")}get fontSize(){throw new Error("Method not implemented.")}get lineWidth(){throw new Error("Method not implemented.")}get fillStyle(){throw new Error("Method not implemented.")}set strokeStyle(e){this.data.push(12,e)}set fillStyle(e){this.data.push(13,e)}set lineWidth(e){this.data.push(10,e)}set fontSize(e){this.data.push(11,e)}measureText(e){throw new Error("Method not implemented.")}textNode(e,t,n,r=0){return this.data.push(9,e,t,n,r),this}beginPath(){return this.data.push(0),this}moveTo(e,t){return this.data.push(1,e,t),this}lineTo(e,t){return this.data.push(2,e,t),this}quadraticTo(e,t,n,r){return this.data.push(3,e,t,n,r),this}cubicTo(e,t,n,r,a,o){return this.data.push(4,e,t,n,r,a,o),this}closePath(){return this.data.push(6),this}rect(e,t,n,r){return this.moveTo(e,t),this.lineTo(e+n,t),this.lineTo(e+n,t+r),this.lineTo(e,t+r),this.lineTo(e,t),this}arc(e,t,n,r,a,o){return this.data.push(5,e,t,n,r,a,o),this}stroke(){return this.data.push(7),this}fill(){return this.data.push(8),this}fillAndStroke(){return this.fill(),this.stroke(),this}applyWith(e,t){let n=(t==null?void 0:t.scale)||1,[r,a]=(t==null?void 0:t.origin)||[0,0],o=this.data,h,m;for(m=0;m<this.data.length;m++)switch(h=o[m],h){case 0:e.beginPath();break;case 11:e.fontSize=o[++m];break;case 10:e.lineWidth=o[++m];break;case 12:e.strokeStyle=o[++m];break;case 13:e.fillStyle=o[++m];break;case 8:e.fill();break;case 2:e.lineTo(n*o[++m]+r,n*o[++m]+a);break;case 3:e.quadraticTo(n*o[++m]+r,n*o[++m]+a,n*o[++m]+r,n*o[++m]+a);break;case 4:e.cubicTo(n*o[++m]+r,n*o[++m]+a,n*o[++m]+r,n*o[++m]+a,n*o[++m]+r,n*o[++m]+a);break;case 5:e.arc(n*o[++m]+r,n*o[++m]+a,n*o[++m],o[++m],o[++m],o[++m]);break;case 1:e.moveTo(n*o[++m]+r,n*o[++m]+a);break;case 7:e.stroke();break;case 9:e.textNode(o[++m],n*o[++m]+r,n*o[++m]+a,o[++m]);break;case 6:e.closePath();break;default:let p=h}}};var R=class extends H{addVisibleBox(e,t,n,r){let{minX:a,minY:o,maxX:h,maxY:m}=this;this.minX=a===void 0?Math.min(e,n):Math.min(e,n,a),this.maxX=h===void 0?Math.max(e,n):Math.max(e,n,h),this.minY=o===void 0?Math.min(t,r):Math.min(t,r,o),this.maxY=m===void 0?Math.max(t,r):Math.max(t,r,m)}arc(e,t,n,r,a,o){return super.arc(e,t,n,r,a,o),console.warn("NOT IMPLEMENTED FOR SCALING!"),this}moveTo(e,t){return super.moveTo(e,t),this.addVisibleBox(e,t,e,t),this}lineTo(e,t){return super.lineTo(e,t),this.addVisibleBox(e,t,e,t),this}applyScaled(e,t,n,r){let a=(r==null?void 0:r.buffer)||0,{minX:o=0,maxX:h=0,minY:m=0,maxY:p=0}=this,b=Math.min((t-2*a)/(h-o),(n-2*a)/(p-m)),s=[.5*(t-b*(o+h)),.5*(n-b*(m+p))];super.applyWith(e,{scale:b,origin:s})}};function ve(i,e,t="text/plain"){let n=`data:${t};base64,${window.btoa(i)}`,r=document.createElement("a");r.setAttribute("download",e),r.href=n,r.click()}function ae(i,e){let{N:t,J:n,W:r}=e,{shadeTop:a="#0000FF33",shadeFront:o="#ffcc0033",shadeSide:h="#444444"}=e.color||{},m=Math.log(t/r)/n,p=[...new F(0,n+1)].map(l=>r*Math.exp(l*m)),b=1/4,s=(l,u,c)=>[l-c*b,t-(u-.8*c*b)];function d(l,[u,c,y]){let T="ff";i.fillStyle=o+T,i.beginPath(),i.moveTo(...s(l[u],l[c],l[y])).lineTo(...s(l[u-1],l[c],l[y])).lineTo(...s(l[u-1],l[c-1],l[y])).lineTo(...s(l[u],l[c-1],l[y])).closePath().fill().stroke(),i.fillStyle=a+T,i.beginPath(),i.moveTo(...s(l[u],l[c],l[y])).lineTo(...s(l[u-1],l[c],l[y])).lineTo(...s(l[u-1],l[c],l[y-1])).lineTo(...s(l[u],l[c],l[y-1])).closePath().fill().stroke(),i.fillStyle=h+T,i.beginPath(),i.moveTo(...s(l[u],l[c],l[y])).lineTo(...s(l[u],l[c],l[y-1])).lineTo(...s(l[u],l[c-1],l[y-1])).lineTo(...s(l[u],l[c-1],l[y])).closePath().fill().stroke()}i.lineWidth=1.5,i.strokeStyle="#000000",i.beginPath(),i.moveTo(...s(r,r,r)).lineTo(...s(t+(t-r)*.1,r,r)),i.moveTo(...s(r,r,r)).lineTo(...s(r,t+(t-r)*.1,r)),i.moveTo(...s(r,r,r)).lineTo(...s(r,r,t+(t-r)*.1)),i.stroke(),i.lineWidth=.75;for(let l=1;l<p.length;l++)for(let u=1;u<p.length-l+1;u++)d(p,[l,u,p.length+1-l-u])}function oe(i,e){let{N:t,J:n,W:r}=e,{fill:a="#0000FF33",error:o="#ffcc0033",gridLine:h="#444444",hypLine:m="#000000"}=e.color||{},p=Math.log(t/r)/n,b=[...new F(0,n+1)].map(y=>r*Math.exp(y*p));i.fillStyle=a,i.strokeStyle=h,i.lineWidth=1.5,i.beginPath(),i.moveTo(b[0],t-b[0]).lineTo(b[0],t-b[n]);for(var s=1;s<b.length;s++)i.lineTo(b[s-1],t-b[n-s]).lineTo(b[s],t-b[n-s]);i.lineTo(b[n],t-b[0]).closePath(),i.fill(),i.beginPath(),i.fillStyle=o,i.lineWidth=1.5,i.moveTo(b[0],t-b[n]);for(var s=1;s<b.length;s++)i.lineTo(b[s-1],t-b[n-s+1]).lineTo(b[s],t-b[n-s+1]);for(var s=n;s>0;s--)i.lineTo(b[s],t-b[n-s]).lineTo(b[s-1],t-b[n-s]);i.lineTo(b[0],t-b[n]),i.fill();let d;i.lineWidth=1,i.beginPath(),d=[b[1],t-b[n]],i.moveTo(r,t-r).lineTo(r,d[1]).lineTo(d[0],d[1]).lineTo(d[0],t-r),d=[b[n],t-b[1]],i.moveTo(r,t-r).lineTo(d[0],t-r).lineTo(d[0],d[1]).lineTo(r,d[1]);let l=n+1,u=2;for(var s=u;s<=l-u;s++)d=[b[s],t-b[l-s]],i.moveTo(r,d[1]).lineTo(d[0],d[1]).lineTo(d[0],t-r);i.stroke(),i.beginPath();let c=100;i.lineWidth=2,i.strokeStyle=m,i.moveTo(r,t-r);for(let y of[...new F(0,c+1)]){let T=Math.pow(t/r,y/c);i.lineTo(r*T,t-t/T)}i.closePath(),i.stroke()}window.customElements.define("hyperbola-app",Z({connected(i){let e={N:100,W:10,J:10,dim:"3D",color:{shadeTop:"#bbbbbb",shadeFront:"#555555",shadeSide:"#111111",hypLine:"#000000",gridLine:"#000000",fill:"#333333",error:"#999999"}};i.addLayer("draw",G({update(n,r){r.clearRect(0,0,n.width,n.height);let a=new R;e.dim=="2D"?oe(a,e):ae(a,e),a.applyScaled(new P(r),n.width,n.height,{buffer:10})}}));let t=i.addLayer("options",A());t.add("number",{label:"Cuts",onChange:n=>{e.J=n,i.update()},default:e.J}),t.add("radio",{label:"Dimension",values:[{name:"2D",label:"2D"},{name:"3D",label:"3D"}],default:e.dim,onChange:n=>{e.dim=n,i.update()}}),t.add("color",{label:"3D-top",onChange:n=>{e.color.shadeTop=n,i.update()},default:e.color.shadeTop}),t.add("color",{label:"3D-front",onChange:n=>{e.color.shadeFront=n,i.update()},default:e.color.shadeFront}),t.add("color",{label:"3D-side",onChange:n=>{e.color.shadeSide=n,i.update()},default:e.color.shadeSide}),t.add("color",{label:"2D-lower",onChange:n=>{e.color.fill=n,i.update()},default:e.color.fill}),t.add("color",{label:"2D-upper",onChange:n=>{e.color.error=n,i.update()},default:e.color.error}),t.add(V,i),t.add("multiButton",{label:"Export as",values:[{name:"SVG",label:"SVG"},{name:"TikZ",label:"TikZ"}],onClick(n){let r,a="Hyperbola",o;if(n=="SVG")r=new N(i.width,i.height),a+=".svg",o="image/svg+xml";else if(n=="TikZ")r=new I(i.width,i.height),a+=".tikz",o="text/plain";else throw new Error("Unknown format");let h=new R;e.dim=="2D"?oe(h,e):ae(h,e),h.applyScaled(r,i.width,i.height,{buffer:10}),ve(r.toFileString(),a,o)}})}}));})();
//# sourceMappingURL=data:application/json;base64,
