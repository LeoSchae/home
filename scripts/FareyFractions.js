(()=>{var M=Math.pow;var R=(i,e,t)=>new Promise((n,r)=>{var s=l=>{try{u(t.next(l))}catch(o){r(o)}},a=l=>{try{u(t.throw(l))}catch(o){r(o)}},u=l=>l.done?n(l.value):Promise.resolve(l.value).then(s,a);u((t=t.apply(i,e)).next())});function A(i,e,t,n){return R(this,null,function*(){var u,l;n!=null||(n=se);let r=n.create();(u=r.begin)==null||u.call(r);let s=e.apply(i,t),a=s.next();for(;!a.done;)r.shouldYield()&&(yield r.yield()),a=s.next();return(l=r.done)==null||l.call(r),a.value})}function G(i,e,t){let n=e.apply(i,t),r=n.next();for(;!r.done;)r=n.next();return r.value}var se={create:()=>({shouldYield(){return!1},yield(){return R(this,null,function*(){})}})};function Y(i){let e=i[i.length-1],t;return"create"in e&&(i=Array.prototype.slice.call(i,0,i.length-1),t=e),[t,i]}var K;(function(t){function i(n){return function(...s){let[a,u]=Y(s);return A(this,n,u,a)}}t.async=i;function e(n){return function(...s){return G(this,n,s)}}t.sync=e})(K||(K={}));var L;(function(t){function i(n){return function(...s){let[a,u]=Y(s);return A(this,this[n],u,a)}}t.async=i;function e(n){return function(...s){return G(this,this[n],s)}}t.sync=e})(L||(L={}));var k;(function(n){n.Infinity="infinity",n.Complex="complex",n.Moebius="moebius"})(k||(k={}));var E={mathtype:k.Infinity},ae=class{constructor(e,t,n=1){this.start=e;this.end=t;this.step=n}*[Symbol.iterator](){let{start:e,step:t,end:n}=this;for(;e<n;)yield e,e+=t}};function oe(i,e){return typeof i=="number"?new g(i,e):Array.isArray(i)?new g(i[0],i[1]):i}var g=class{constructor(e,t=0){this.mathtype=k.Complex;this.real=e,this.imag=t}abs2(){return this.real*this.real+this.imag*this.imag}abs(){return Math.sqrt(this.abs2())}add(e){return typeof e=="number"?new g(this.real+e,this.imag):new g(this.real+e.real,this.imag+e.imag)}sub(e){return typeof e=="number"?new g(this.real-e,this.imag):new g(this.real-e.real,this.imag-e.imag)}mul(e){return typeof e=="number"?new g(e*this.real,e*this.imag):new g(this.real*e.real-this.imag*e.imag,this.imag*e.real+this.real*e.imag)}div(e){return typeof e=="number"?new g(this.real/e,this.imag/e):this.mul(e.inv())}inv(){var e=this.abs2();return new g(this.real/e,-this.imag/e)}arg(){var e=this.real,t=this.imag;if(e==0)return t>0?.5*Math.PI:t<0?1.5*Math.PI:0;if(e>=0){let n=Math.atan(1*t/e);return n<0?2*Math.PI+n:n}return Math.atan(1*t/e)+Math.PI}toTeX(){return this.imag==0?`${this.real}`:this.real==0?`${this.imag}i`:`${this.real} + ${this.imag}i`}},v=class{constructor(e,t,n,r){this.mathtype=k.Moebius;this.m=[e,t,n,r]}mul(e){let t=this.m,n=e.m;return new v(t[0]*n[0]+t[1]*n[2],t[0]*n[1]+t[1]*n[3],t[2]*n[0]+t[3]*n[2],t[2]*n[1]+t[3]*n[3])}inv(){let e=this.m;return new v(e[3],-e[1],-e[2],e[0])}transform(e,t){if(typeof e=="number")e=oe(e,t);else if(e.mathtype===k.Infinity)return this.m[2]==0?E:new g(this.m[0]/this.m[2]);let n=this.m,r=e.mul(n[2]).add(n[3]);return r.real==0&&r.imag==0?E:e.mul(n[0]).add(n[1]).div(r)}toTeX(){return`\\begin{pmatrix}${this.m[0]}&${this.m[1]}\\\\ ${this.m[2]}&${this.m[3]}\\end{pmatrix}`}},W;(function(f){class i{constructor(m,d){this.cosetRepresentatives=L.sync("_cosetRepresentatives");this.cosetRepresentativesAsync=L.async("_cosetRepresentatives");this.indicator=m,this.tex=d}findCosetIndex(m,d,p){let c=p.inv(),b=this.indicator;for(var y=0;y<d.length;y++)if(b(m,d[y].mul(c)))return y;return-1}findCoset(m,d,p){let c=p.inv(),b=this.indicator;return d.find(y=>b(m,y.mul(c)))}*_cosetRepresentatives(m){if(!Number.isInteger(m)||m<=0)throw"Invalid Level";let d=[new v(0,-1,1,0),new v(1,1,0,1),new v(1,-1,0,1)],p=this,c=[new v(1,0,0,1)];for(var b=[],y=[],x=[new v(1,0,0,1)];x.length>0;){b=y,y=x,x=[];for(let S of y)for(let $ of d){yield;let T=S.mul($);p.findCosetIndex(m,b,T)==-1&&p.findCosetIndex(m,x,T)==-1&&p.findCosetIndex(m,y,T)==-1&&(c.push(T),x.push(T))}}return c}toTeX(){return this.tex}}f.CongruenceSubgroup=i;function e(h,m,d){return(h-m)%d==0}function t(h,m){return e(m.m[2],0,h)}f.Gamma_0=new i(t,"\\Gamma_0");function r(h,m){return e(m.m[2],0,h)&&(e(m.m[0],1,h)||e(m.m[0],-1,h))}f.Gamma_1=new i(r,"\\Gamma_1");function a(h,m){return e(m.m[2],0,h)&&e(m.m[1],0,h)&&(e(m.m[0],1,h)||e(m.m[0],-1,h))}f.Gamma=new i(a,"\\Gamma"),f.Gamma.cosetRepresentatives=function(h){let m=f.Gamma_1.cosetRepresentatives(h),d=[];for(let p=0;p<h;p++){let c=new v(1,p,0,1);d.push(...m.map(b=>c.mul(b)))}return d},f.Gamma._cosetRepresentatives=function*(h){let m=yield*f.Gamma_1._cosetRepresentatives(h),d=[];for(let p=0;p<h;p++){yield;let c=new v(1,p,0,1);d.push(...m.map(b=>c.mul(b)))}return d};let l=new g(Math.cos(Math.PI/3),Math.sin(Math.PI/3));f.Domain1={corners:[E,l,new g(0,1),new g(-l.real,l.imag)],findCosetOf(h,m=100){if(h.imag<=0)return;let d=new v(1,0,0,1),p=h;for(var c=0;c<m;c++){if(p==E)return d.inv();var b=Math.floor(p.real+.5);if(d=new v(1,-b,0,1).mul(d),p=d.transform(h),p.abs2()>=1)return d.inv();d=new v(0,1,-1,0).mul(d),p=d.transform(h)}console.log("Max iterations in 'findMoebiousToFund' reached")}}})(W||(W={}));var Z=2*Math.PI,q=.5/Math.PI,_=class{constructor(e,t,n){this._lineWidth=1;this._fontSize=13;this._fillColor="#000000";this._strokeColor="#000000";this.fontAscent=-1;this.fontDescent=-1;this._ctx=e,this.width=t===void 0?e.canvas.width:t,this.height=n===void 0?e.canvas.height:n,this.fontSize=13}get lineWidth(){return this._lineWidth}set lineWidth(e){this._ctx.lineWidth=e,this._lineWidth=e}get fontSize(){return this._fontSize}set fontSize(e){this._ctx.textBaseline="alphabetic",this._ctx.font=e+"px Times New Roman",this._fontSize=e;let t=this._ctx.measureText("1ATOgjp");this.fontAscent=t.fontBoundingBoxAscent||t.actualBoundingBoxAscent,this.fontDescent=t.fontBoundingBoxDescent||t.actualBoundingBoxDescent}get fillStyle(){return this._fillColor}set fillStyle(e){this._ctx.fillStyle=e,this._fillColor=e}get strokeStyle(){return this._strokeColor}set strokeStyle(e){this._ctx.strokeStyle=e,this._strokeColor=e}measureText(e){this._ctx.textAlign="center";let t=this._ctx.measureText(e),n=(this.fontAscent+this.fontDescent)/2;return{top:n*1.3,bot:n*1,left:t.actualBoundingBoxLeft,right:t.actualBoundingBoxRight}}textNode(e,t,n,r){let s="middle",a="center";switch(r&12){case w.T:s="top";break;case w.B:s="bottom";break}switch(r&3){case w.L:a="left";break;case w.R:a="right";break}return this._ctx.textBaseline=s,this._ctx.textAlign=a,this._ctx.fillText(e,t,n),this}beginPath(){return this._ctx.beginPath(),this}moveTo(e,t){return this._ctx.moveTo(e,t),this}lineTo(e,t){return this._ctx.lineTo(e,t),this}quadraticTo(e,t,n,r){return this._ctx.quadraticCurveTo(e,t,n,r),this}cubicTo(e,t,n,r,s,a){return this._ctx.bezierCurveTo(e,t,n,r,s,a),this}closePath(){return this._ctx.closePath(),this}rect(e,t,n,r){return this._ctx.rect(e,t,n,r),this}arc(e,t,n,r,s,a){return this._ctx.arc(e,t,n,r-Z*Math.floor(q*r),s-Z*Math.floor(q*s),!a),this}stroke(){return this._ctx.stroke(),this}fill(){return this._ctx.fill(),this}fillAndStroke(){return this.fill(),this.stroke(),this}};var J=class{constructor(e,t,...n){this.name=e;this.children=n,this.attributes=t||{}}attrString(){return Object.entries(this.attributes).map(([e,t])=>`${e}="${t}"`).join(" ")}chString(){return this.children.map(e=>e.toString()).join("")}append(e){this.children.push(e)}toString(){let e=this.name;return e===""?this.chString():`<${e} ${this.attrString()}>${this.chString()}</${e}>`}};function V(i,e,...t){return typeof i=="function"?i(e,...t):new J(i,e,...t)}V.Fragment="";var Ee=180/Math.PI,Pe=2*Math.PI,$e=.5/Math.PI;var w;(function(o){o[o.C=0]="C",o[o.T=8]="T",o[o.L=2]="L",o[o.R=1]="R",o[o.B=4]="B",o[o.TL=10]="TL",o[o.TR=9]="TR",o[o.BL=6]="BL",o[o.BR=5]="BR"})(w||(w={}));var P="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",U=[..."\u{1D538}\u{1D539}\u2102\u{1D53B}\u{1D53C}\u{1D53D}\u{1D53E}\u210D\u{1D540}\u{1D541}\u{1D542}\u{1D543}\u{1D544}\u2115\u{1D546}\u2119\u211A\u211D\u{1D54A}\u{1D54B}\u{1D54C}\u{1D54D}\u{1D54E}\u{1D54F}\u{1D550}\u2124\u{1D552}\u{1D553}\u{1D554}\u{1D555}\u{1D556}\u{1D557}\u{1D558}\u{1D559}\u{1D55A}\u{1D55B}\u{1D55C}\u{1D55D}\u{1D55E}\u{1D55F}\u{1D560}\u{1D561}\u{1D562}\u{1D563}\u{1D564}\u{1D565}\u{1D566}\u{1D567}\u{1D568}\u{1D569}\u{1D56A}\u{1D56B}\u{1D7D8}\u{1D7D9}\u{1D7DA}\u{1D7DB}\u{1D7DC}\u{1D7DD}\u{1D7DE}\u{1D7DF}\u{1D7E0}\u{1D7E1}"],Q=[..."\u{1D56C}\u{1D56D}\u{1D56E}\u{1D56F}\u{1D570}\u{1D571}\u{1D572}\u{1D573}\u{1D574}\u{1D575}\u{1D576}\u{1D577}\u{1D578}\u{1D579}\u{1D57A}\u{1D57B}\u{1D57C}\u{1D57D}\u{1D57E}\u{1D57F}\u{1D580}\u{1D581}\u{1D582}\u{1D583}\u{1D584}\u{1D585}\u{1D586}\u{1D587}\u{1D588}\u{1D589}\u{1D58A}\u{1D58B}\u{1D58C}\u{1D58D}\u{1D58E}\u{1D58F}\u{1D590}\u{1D591}\u{1D592}\u{1D593}\u{1D594}\u{1D595}\u{1D596}\u{1D597}\u{1D598}\u{1D599}\u{1D59A}\u{1D59B}\u{1D59C}\u{1D59D}\u{1D59E}\u{1D59F}"],I={Alpha:"\u0391",alpha:"\u03B1",Beta:"\u0392",beta:"\u03B2",Gamma:"\u0393",gamma:"\u03B3",Delta:"\u0394",delta:"\u03B4",Epsilon:"\u0395",epsilon:"\u03B5",Zeta:"\u0396",zeta:"\u03B6",Eta:"\u0397",eta:"\u03B7",Theta:"\u0398",theta:"\u03B8",Iota:"\u0399",iota:"\u03B9",Kappa:"\u039A",kappa:"\u03BA",Lambda:"\u039B",lambda:"\u03BB",Mu:"\u039C",mu:"\u03BC",Nu:"\u039D",nu:"\u03BD",Xi:"\u039E",xi:"\u03BE",Omicron:"\u039F",omicron:"\u03BF",Pi:"\u03A0",pi:"\u03C0",Rho:"\u03A1",rho:"\u03C1",Sigma:"\u03A3",sigma:"\u03C3",Tau:"\u03A4",tau:"\u03C4",Upsilon:"\u03A5",upsilon:"\u03C5",Phi:"\u03A6",phi:"\u03C6",Chi:"\u03A7",chi:"\u03C7",Psi:"\u03A8",psi:"\u03C8",Omega:"\u03A9",omega:"\u03C9",mathBB:function(i){if(i.length==1){let e=P.indexOf(i);return U[e]}else{let e="";for(let t=0;t<i.length;t++)e=e+U[P.indexOf(i.charAt(t))];return e}},mathFrak:function(i){if(i.length==1){let e=P.indexOf(i);return Q[e]}else{let e="";for(let t=0;t<i.length;t++)e=e+Q[P.indexOf(i.charAt(t))];return e}}};var N=class{constructor(e,t){this.origin=e;this.scale=t}project(e){return Array.isArray(e)&&(e=new g(e[0],e[1])),[e.real*this.scale+this.origin[0],-e.imag*this.scale+this.origin[1]]}invert(e){return new g((e[0]-this.origin[0])/this.scale,-(e[1]-this.origin[1])/this.scale)}addTranslation(e){this.origin=[this.origin[0]+e[0],this.origin[1]+e[1]]}addZoom(e,t){let[n,r]=this.origin;this.origin=[n*e+t[0]*(1-e),r*e+t[1]*(1-e)],this.scale*=e}};function j(i,e,t,n,r,{arrowSize:s=9}={}){let a=Math.sqrt(r[0]*r[0]+r[1]*r[1]);r=[r[0]/a,r[1]/a];let u=[r[0]===0?-1/0:(0-n[0])/r[0],r[0]===0?1/0:(e-n[0])/r[0],r[1]===0?-1/0:(0-n[1])/r[1],r[1]===0?1/0:(t-n[1])/r[1]].sort((h,m)=>h-m),l=[n[0]+u[1]*r[0],n[1]+u[1]*r[1]],o=[n[0]+(u[2]-1)*r[0],n[1]+(u[2]-1)*r[1]];i.beginPath(),i.moveTo(l[0],l[1]),i.lineTo(o[0]-2*r[0],o[1]-2*r[1]),i.stroke();let f=s;return i.beginPath(),i.moveTo(o[0],o[1]),i.lineTo(o[0]-f*r[0]+.5*f*r[1],o[1]-f*r[1]-.5*f*r[0]),i.lineTo(o[0]-f*r[0]-.5*f*r[1],o[1]-f*r[1]+.5*f*r[0]),i.lineTo(o[0],o[1]),i.fill(),[l[0],l[1],o[0],o[1]]}function ee(i,e,{noX:t=!1,noY:n=!1,arrowSize:r=7,fontSize:s=13,labelX:a=I.mathBB("R"),labelY:u="i"+I.mathBB("R")}={}){let{origin:l,scale:o}=e,{width:f,height:h}=i;i.fontSize=s;let m=function(y,x=0){let{ps:S,ox:$,oy:T}=this;return[y*S+$,-x*S+T]}.bind({ox:l[0],oy:l[1],ps:o}),d=m(1),p=m(0,1),c=[d[0]-l[0],d[1]-l[1]],b=[p[0]-l[0],p[1]-l[1]];if(!t){let[,,y,x]=j(i,f,h,l,c,{arrowSize:r});a&&i.textNode(a,y-.2*s,x+.2*s+r/2,w.TR)}if(!n){let[,,y,x]=j(i,f,h,l,b,{arrowSize:r});!n&&u&&i.textNode(u,y-.2*s-r/2,x+.2*s,w.TR)}}function te(i,e,{origin:t,scale:n},r,{gap:s=5}={}){var a=i.width||0,u=i.height||0;if(e=="x"){let l=t[0],o=t[1];for(let f=0;f<r.length;f++){let{at:h,sprite:m}=r[f],d=h*n+l;if(d+m.right>=0&&d-m.left<=a){let p=o,c=d-.5,b=d+.5,y=o+3;i.beginPath().moveTo(c,p).lineTo(b,p).lineTo(b,y).lineTo(c,y).closePath(),i.fill(),m.draw(i,d,o+m.top+s)}}}}function C(i,e,t){let{center:n=!1}=t||{},{top:r,bot:s,left:a,right:u}=i.measureText(e),l=0;return n&&(l=(u-a)/2,a+=l,u-=l),{text:e,dx:l,top:r,bot:s,left:a,right:u,draw:function(f,h,m){f.textNode(this.text,h-this.dx,m,0)}}}function ne(i,e){let t=.05*(i.top+i.bot+e.top+e.bot),n=.5*(i.left-i.right),r=.5*(e.left-e.right),s=-i.bot-t,a=e.top+t,u=Math.max(.5*(i.left+i.right),.5*(e.left+e.right));return{data:[n,s,r,a,u],top:-s+i.top,bot:a+e.bot,left:u,right:u,draw:function(o,f,h){let[m,d,p,c,b]=this.data;i.draw(o,f+m,h+d),e.draw(o,f+p,h+c),o.beginPath(),o.moveTo(f-b,h),o.lineTo(f+b,h),o.stroke()}}}var F=class{constructor(e,t,n){this.onDrag=e;this.onZoom=t;this.onHover=n;this.state=new Array;this.down=e=>{if(e.pointerType=="mouse"&&e.button!=0)return;let{pointerId:t,offsetX:n,offsetY:r}=e,s=this.state.find(({id:a})=>a===t);s===void 0&&(s={id:t,x:n,y:r},this.state.push(s)),this.state.length<=1?this.onHover([n,r]):this.onHover(null),e.currentTarget.setPointerCapture(t)};this.move=e=>{let{pointerId:t,offsetX:n,offsetY:r}=e;if(this.state.length===0){this.onHover([n,r]);return}let s=this.state.findIndex(({id:u})=>u===t);if(s===-1)return;let a=this.state[s];if(this.state.length===1)this.onHover([n,r]),this.onDrag([n-a.x,r-a.y]);else if(this.state.length===2){let u=a,l=this.state[1-s],o=M(u.x-l.x,2)+M(u.y-l.y,2),f=M(n-l.x,2)+M(r-l.y,2),h=[.5*(n-u.x),.5*(r-u.y)];this.onHover(null),this.onDrag(h),this.onZoom(f/o,[.5*(n+l.x),.5*(r+l.y)])}a.x=n,a.y=r};this.up=e=>{if(e.pointerType=="mouse"&&e.button!=0)return;let{pointerId:t,offsetX:n,offsetY:r}=e,s=this.state.findIndex(({id:a})=>a===t);this.state.splice(s,1),e.currentTarget.releasePointerCapture(t)};this.cancel=e=>{if(e.pointerType=="mouse"&&e.button!=0)return;let{pointerId:t,offsetX:n,offsetY:r}=e,s=this.state.findIndex(({id:a})=>a===t);this.state.splice(s,1),e.currentTarget.releasePointerCapture(t)};this.leave=e=>{if(e.pointerType=="mouse"&&this.state.length===0&&this.onHover(null),e.pointerType=="mouse"&&e.button!=0||e.currentTarget.hasPointerCapture(e.pointerId))return;let{pointerId:t,offsetX:n,offsetY:r}=e,s=this.state.findIndex(({id:a})=>a===t);this.state.splice(s,1),e.currentTarget.releasePointerCapture(t)};this.wheel=e=>{e.preventDefault(),this.onZoom(Math.exp(-e.deltaY*(e.deltaMode==1?.03333:.001)),[e.offsetX,e.offsetY])}}registerListeners(e){e.addEventListener("pointerup",this.up),e.addEventListener("pointerdown",this.down),e.addEventListener("pointermove",this.move),e.addEventListener("pointercancel",this.cancel),e.addEventListener("pointerleave",this.leave),e.addEventListener("wheel",this.wheel)}removeListeres(e){e.removeEventListener("pointerup",this.up),e.removeEventListener("pointerdown",this.down),e.removeEventListener("pointermove",this.move),e.removeEventListener("pointercancel",this.cancel),e.removeEventListener("wheel",this.wheel)}};function O(i,e=[],t={},n={}){let r=document.createElement(i);for(let[a,u]of Object.entries(t))r.setAttribute(a,typeof u=="string"?u:u+"");for(let[a,u]of Object.entries(n))r[a]=u;if(Array.isArray(e))for(var s of e)typeof s=="string"&&(s=document.createTextNode(s)),r.append(s);else r.innerHTML=e.__html;return r}function H(i,e){for(var t of e)Array.isArray(t)?H(i,t):i.append(t instanceof Node?t:""+t)}function B(i,e,...t){if(i===B.Fragment){let a=document.createDocumentFragment();return H(a,t),a}let n=document.createElement(i);e=e||{},"__html"in e&&(n.innerHTML=""+e.__html,delete e.__html);for(var[r,s]of Object.entries(e))typeof s=="function"?n[r]=s:n.setAttribute(r,""+s);return H(n,t),n}B.Fragment="";var ue=`:host{position:relative;top:0;left:0;display:block;width:100%;height:100%;overflow:hidden;padding:0;margin:0}._container_1kdby_13{display:block;position:absolute;width:100%;height:100%;touch-action:none;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}._container_1kdby_13>div,._container_1kdby_13>canvas{position:absolute;top:0;left:0;width:100%;height:100%}
`,me={container:"_container_1kdby_13"},D={css:ue,class:me};function X(i){return{update(e,t){let n=t.getContext("2d"),r=window.devicePixelRatio;(Math.floor(e.width*r)!==t.width||Math.floor(e.height*r)!==t.height)&&(t.width=Math.floor(e.width*r),t.height=Math.floor(e.height*r)),n.setTransform(r,0,0,r,0,0),i.update(e,n)},resized(e){e.update(this)},connected(e){return{nodes:O("canvas",[],{class:"canvas-layer"})}}}}var re=class extends HTMLElement{constructor(){super(...arguments);this.shadow=this.attachShadow({mode:"open"});this.cleanup=[]}connectedCallback(){var o,f;let e=this.shadow;e.innerHTML="";let t=O("style",[D.css]),n=O("div",[],{class:D.class.container}),r=new ResizeObserver(()=>{var m,d,p,c;(d=(m=this.layerHandler).resized)==null||d.call(m,l);for(var h of s.values())(c=(p=h.layer)==null?void 0:p.resized)==null||c.call(p,l,h.nodes)});r.observe(n),e.append(t,n);let s=new Map,a=0,u=()=>{var d,p;let h=a===2;a=0;for(var m of s.values())(h||m.update)&&((p=(d=m.layer)==null?void 0:d.update)==null||p.call(d,l,m.nodes)),m.update=!1},l={get width(){return n.clientWidth},get height(){return n.clientHeight},containerElement:n,hostElement:this,update:function(h){if(a!==2){if(a===0&&requestAnimationFrame(u),h===void 0){a=2;return}if(typeof h=="string"){a=1;let d=s.get(h);d&&(d.update=!0);return}for(var m of s.values())h===m.layer&&(m.update=!0)}},addStyles:function(h){t.append(h)},addLayer:function(h,m){if(m instanceof Node){n.appendChild(m);return}let d,p;typeof m=="function"?(p=m(l),d=void 0):(p=m.connected(l),d=m);let c=p.nodes;c&&(Array.isArray(c)?n.append(...c):n.append(c)),s.set(h,{nodes:c,layer:d,update:!1}),l.update(h);let b=p.handle;return b||(b={}),b.update=()=>{this.update(h)},b},attachToShaddow(...h){e.append(...h)}};(f=(o=this.layerHandler).connected)==null||f.call(o,l),this.cleanup.push(()=>{var m,d,p,c;r.unobserve(n);for(var h of s.values())(d=(m=h.layer)==null?void 0:m.disconnected)==null||d.call(m,l);(c=(p=this.layerHandler).disconnected)==null||c.call(p,l)})}disconnectedCallback(){for(var e of this.cleanup)e();this.cleanup=[],this.shadow.innerHTML=""}};function ie(i){return class extends re{constructor(){super(...arguments);this.layerHandler=i}}}window.customElements.define("farey-fractions",ie({connected(i){let e=this,t=new N([100,100],100);function n(){let s=t.project(new g(0)),a=t.project(new g(1)),u=Math.abs(s[0]-a[0]),l=!1,{width:o,height:f}=i;s[1]<f/6?(t.addTranslation([0,-s[1]+f/6]),l=!0):s[1]>5*f/6&&(t.addTranslation([0,-s[1]+5*f/6]),l=!0),a[0]<.5*o&&(t.addTranslation([-a[0]+.5*o,0]),l=!0),s[0]>o*.5&&(t.addTranslation([-s[0]+.5*o,0]),l=!0),u<.25*o&&(t.addZoom(.25*o/u,[o/2,f/2]),l=!0),l&&i.update()}new F(s=>{t.addTranslation(s),i.update()},(s,a)=>{let u=t.project(new g(0)),l=t.project(new g(1)),o=Math.abs(u[0]-l[0]);s<=.25*i.width/o&&(s=.25*i.width/o),t.addZoom(s,a),i.update()},()=>{}).registerListeners(i.containerElement),i.addLayer("draw",X({update(s,a){n();let u=new _(a);a.clearRect(0,0,s.width,s.height),a.lineWidth=1.25,ee(u,t);let l=10;u.fontSize=l;let o=he(t.scale,l),f=Math.max(-t.origin[0]/t.scale,1e-11),h=Math.min((u.width-t.origin[0])/t.scale,.99999999999),[m,d,p,c]=de(o,f),b=pe(u,[m,d,p,c],o,h);b.push({sprite:C(u,"1",{center:!0}),at:1});for(let x of b);te(u,"x",t,b);let y=C(u,"Fractions with denominator up to "+o);u.beginPath(),u.rect(0,u.height,y.left+y.right+20,-Math.round(y.bot+y.top+10)),u.fillStyle="#FFFFFF",u.fill(),u.stroke(),u.fillStyle="#000000",y.draw(u,y.left+10,u.height-y.bot-5)}}))}}));function he(i,e){let t=0,n=1,r=0;for(;;)if(i/((t+n)*(t+n-1))<.75*(1+Math.log10(t+n))*e){if(r==0)return t;t=t+r,n=1,r=0}else r=n,n=n*2}function de(i,e){let t=Math.floor(e);e=e-t;let n=0,r=1,s=1,a=1;for(;;){let u=s-e*a,l;u!=0&&(l=Math.floor((e*r-n)/u)),(l===void 0||r+l*a>i)&&(l=Math.floor((i-r)/a)),n=n+l*s,r=r+l*a,u=r*e-n;let o;if(u!=0&&(o=Math.floor((s-e*a)/u)),(o===void 0||r*o+a>i)&&(o=Math.floor((i-a)/r)),s=n*o+s,a=r*o+a,l==0&&o==0)break}return[n,r,s,a]}function pe(i,e,t,n){let r=[],[s,a,u,l]=e;for(;u<n*l;){let o=Math.floor((t+a)/l);[s,a,u,l]=[u,l,o*u-s,o*l-a],r.push({sprite:ne(C(i,""+s),C(i,""+a)),at:s/a})}return r}})();
//# sourceMappingURL=data:application/json;base64,
